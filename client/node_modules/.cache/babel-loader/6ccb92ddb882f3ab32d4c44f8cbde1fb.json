{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Dovah\\\\Desktop\\\\BD-Project\\\\client\\\\src\\\\components\\\\Dependencia\\\\DependenciasTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\n\nconst DependenciasTable = () => {\n  _s();\n\n  //estado del Componente\n  const [dependencias, setDependencias] = useState([{}]); // const [ id, setId] = useState([{}]);\n  // const [ nombre, setNombre ] = useState([{}]);\n  // const [ centro_costo, setCentro_costo ] = useState([{}]);\n  //estado para los titulos de las columnas de la tabla\n  //NOTA: EL CAMPO FIELD DEBE SER EL MISMO NOMBRE QUE TIENE EL ATRIBUTO EN LA BD, SINO SE ROMPE\n  //TODAS LAS VARIABLES DE LAS TABLAS DEBEN TENER EL MISMO NOMBRE QUE EN LA BD\n\n  const [state, setState] = useState({\n    columns: [{\n      title: 'id',\n      field: 'nombre'\n    }, {\n      title: 'Nombre Dependencia',\n      field: 'nombre'\n    }, {\n      title: 'Centro de Costo',\n      field: 'centro_costo'\n    }],\n    data: []\n  });\n  useEffect(() => {\n    fetchDependencias();\n  }, []); //obtener todas las Dependencias\n\n  const fetchDependencias = () => {\n    fetch('http://localhost:5000/dependencias').then(res => res.json()).then(result => setDependencias(result)).catch(err => console.log(err.message));\n  }; //eliminar una Dependencia\n\n\n  const deleteDependencia = id => {\n    console.log(id);\n    fetch(`http://localhost:5000/dependencias/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => console.log(result)).catch(err => console.log(err.message));\n  }; //actualizar una Dependencia\n\n\n  const updateDependencia = dependencia => {\n    console.log(dependencia);\n    const {\n      id,\n      nombre,\n      centro_costo\n    } = dependencia;\n    const updateD = fetch(`http://localhost:5000/dependencias/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        id,\n        nombre,\n        centro_costo\n      })\n    }).then(res => res.json()).then(result => console.log(result)).catch(err => console.log(err.message));\n    console.log(updateD);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MaterialTable, {\n    children: [\"title=\\\"Dependencias\\\" columns=\", state.columns, \"data=\", dependencias, \"editable=\", {\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              updateDependencia(newData); // Aqui se Actualiza el campo\n\n              console.log(newData);\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        deleteDependencia(oldData.id);\n        console.log(oldData.id);\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    }]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DependenciasTable, \"SyMXydAt3kzGDnIl+yiefXnnyvQ=\");\n\n_c = DependenciasTable;\nexport default DependenciasTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DependenciasTable\");","map":{"version":3,"sources":["C:/Users/Dovah/Desktop/BD-Project/client/src/components/Dependencia/DependenciasTable.js"],"names":["React","useState","useEffect","MaterialTable","DependenciasTable","dependencias","setDependencias","state","setState","columns","title","field","data","fetchDependencias","fetch","then","res","json","result","catch","err","console","log","message","deleteDependencia","id","method","headers","updateDependencia","dependencia","nombre","centro_costo","updateD","body","JSON","stringify","onRowUpdate","newData","oldData","Promise","resolve","setTimeout","prevState","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MaterialTable from 'material-table'\r\n\r\n\r\nconst DependenciasTable = () => {\r\n\r\n    //estado del Componente\r\n    \r\n    const [dependencias, setDependencias] = useState([{}]);\r\n    // const [ id, setId] = useState([{}]);\r\n    // const [ nombre, setNombre ] = useState([{}]);\r\n    // const [ centro_costo, setCentro_costo ] = useState([{}]);\r\n    //estado para los titulos de las columnas de la tabla\r\n    //NOTA: EL CAMPO FIELD DEBE SER EL MISMO NOMBRE QUE TIENE EL ATRIBUTO EN LA BD, SINO SE ROMPE\r\n    //TODAS LAS VARIABLES DE LAS TABLAS DEBEN TENER EL MISMO NOMBRE QUE EN LA BD\r\n    const [ state, setState ] = useState({\r\n        columns: [\r\n            {title: 'id', field: 'nombre'},\r\n            {title: 'Nombre Dependencia', field: 'nombre'},\r\n            {title: 'Centro de Costo', field: 'centro_costo'},\r\n        ],\r\n        data: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchDependencias()\r\n    }, [])\r\n\r\n    //obtener todas las Dependencias\r\n    const fetchDependencias = () => {\r\n        fetch('http://localhost:5000/dependencias')\r\n            .then(res => res.json())\r\n            .then(result => setDependencias(result))\r\n            .catch(err => console.log(err.message))\r\n    }\r\n\r\n    //eliminar una Dependencia\r\n    const deleteDependencia = (id) => {\r\n        console.log(id)\r\n        fetch(`http://localhost:5000/dependencias/${id}`, {\r\n            method: 'DELETE',\r\n            headers: { 'Content-type': 'application/json' }\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err.message))\r\n    }\r\n\r\n    //actualizar una Dependencia\r\n    const updateDependencia = (dependencia) => {\r\n        console.log(dependencia)\r\n        const { id, nombre, centro_costo } = dependencia;\r\n        const updateD = fetch(`http://localhost:5000/dependencias/${id}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-type': 'application/json' },\r\n            body: JSON.stringify({ id, nombre, centro_costo })\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err.message))\r\n        console.log(updateD)\r\n    }\r\n\r\n    return(\r\n        <MaterialTable>\r\n            title=\"Dependencias\"\r\n            columns={state.columns}\r\n            data={dependencias}\r\n            editable={{\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve) =>{\r\n                        setTimeout(() =>{\r\n                            resolve();\r\n                            if (oldData){\r\n                                setState((prevState)=>{\r\n                                    const data = [...prevState.data];\r\n                                    data[data.indexOf(oldData)] = newData;\r\n                                    updateDependencia(newData); // Aqui se Actualiza el campo\r\n                                    console.log(newData);\r\n                                    return { ...prevState, data};\r\n                                });\r\n                            }\r\n                        }, 600);\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise ((resolve) =>{\r\n                        deleteDependencia(oldData.id);\r\n                        console.log(oldData.id);\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            setState((prevState) => {\r\n                                const data = [... prevState.data];\r\n                                data.splice(data.indexOf(oldData), 1);\r\n                                return { ...prevState, data };\r\n                            });\r\n                        }, 600);\r\n                    }),\r\n            }}\r\n        </MaterialTable>\r\n    )\r\n}\r\n\r\nexport default DependenciasTable"]},"metadata":{},"sourceType":"module"}