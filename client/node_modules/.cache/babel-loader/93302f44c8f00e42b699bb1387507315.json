{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Dovah\\\\Desktop\\\\BD-Project\\\\client\\\\src\\\\components\\\\Respuestas\\\\RespuestasTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table'; // cedula, id_dependencia, nombre, tipo \n\nconst RespuestasTable = () => {\n  _s();\n\n  const [respuestas, setrespuestas] = useState([{}]);\n  const [state, setState] = useState({\n    columns: [{\n      title: 'Cedula',\n      field: 'cedula',\n      editable: 'never'\n    }, {\n      title: 'Dependencia',\n      field: 'id_dependencia'\n    }, {\n      title: 'Nombre',\n      field: 'nombre'\n    }, {\n      title: 'Tipo',\n      field: 'tipo'\n    }],\n    data: []\n  }); //Cuando se renderiza el componente se llama la funcion que obtiene todas las especialidades\n\n  useEffect(() => {\n    fetchrespuestas();\n  }, []); //obtener todos los respuestas\n\n  const fetchrespuestas = () => {\n    fetch('http://localhost:5000/respuestas').then(res => res.json()).then(result => setrespuestas(result)).catch(err => console.log(err.message));\n  }; //eliminar un Trabajador\n\n\n  const deleterespuestas = cedula => {\n    console.log(cedula);\n    fetch(`http://localhost:5000/respuestas/${cedula}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => console.log(result)).catch(err => console.log(err.message));\n  }; //actualizar un Trabajador\n\n\n  const updaterespuestas = trabajador => {\n    console.log(trabajador);\n    const {\n      cedula,\n      id_dependencia,\n      nombre,\n      tipo\n    } = trabajador;\n    const updateT = fetch(`http://localhost:5000/respuestas/${cedula}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        cedula,\n        id_dependencia,\n        nombre,\n        tipo\n      })\n    }).then(res => res.json()).then(result => console.log(result)).catch(err => console.log(err.message));\n    console.log(updateT);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MaterialTable, {\n    title: \"respuestas\",\n    columns: state.columns,\n    data: respuestas,\n    options: {\n      filtering: true\n    },\n    editable: {\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              updaterespuestas(newData); //AQUI SE ACTUALIZA EL CAMPO\n\n              console.log(newData);\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        deleterespuestas(oldData.cedula_p); //AQUI SE DELETEA LA ESPECIALIDAD\n\n        console.log(oldData.cedula_p);\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RespuestasTable, \"2M5eFpzHKEGsLuI9Kzj7Lk7HGK4=\");\n\n_c = RespuestasTable;\nexport default RespuestasTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"RespuestasTable\");","map":{"version":3,"sources":["C:/Users/Dovah/Desktop/BD-Project/client/src/components/Respuestas/RespuestasTable.js"],"names":["React","useState","useEffect","MaterialTable","RespuestasTable","respuestas","setrespuestas","state","setState","columns","title","field","editable","data","fetchrespuestas","fetch","then","res","json","result","catch","err","console","log","message","deleterespuestas","cedula","method","headers","updaterespuestas","trabajador","id_dependencia","nombre","tipo","updateT","body","JSON","stringify","filtering","onRowUpdate","newData","oldData","Promise","resolve","setTimeout","prevState","indexOf","onRowDelete","cedula_p","splice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport MaterialTable from 'material-table'\r\n\r\n// cedula, id_dependencia, nombre, tipo \r\nconst RespuestasTable = () => {\r\n    const [respuestas, setrespuestas] = useState([{}])\r\n    const [state, setState] = useState({\r\n        columns: [\r\n            { title: 'Cedula', field: 'cedula', editable: 'never' },\r\n            { title: 'Dependencia', field: 'id_dependencia' },\r\n            { title: 'Nombre', field: 'nombre' },\r\n            { title: 'Tipo', field: 'tipo' },\r\n        ],\r\n        data: []\r\n    })\r\n\r\n    //Cuando se renderiza el componente se llama la funcion que obtiene todas las especialidades\r\n    useEffect(() => {\r\n        fetchrespuestas()\r\n    }, [])\r\n\r\n    //obtener todos los respuestas\r\n    const fetchrespuestas = () => {\r\n        fetch('http://localhost:5000/respuestas')\r\n            .then(res => res.json())\r\n            .then(result => setrespuestas(result))\r\n            .catch(err => console.log(err.message))\r\n    }\r\n\r\n    //eliminar un Trabajador\r\n    const deleterespuestas = (cedula) => {\r\n        console.log(cedula)\r\n        fetch(`http://localhost:5000/respuestas/${cedula}`, {\r\n            method: 'DELETE',\r\n            headers: { 'Content-type': 'application/json' }\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err.message))\r\n    }\r\n\r\n    //actualizar un Trabajador\r\n    const updaterespuestas = (trabajador) => {\r\n        console.log(trabajador)\r\n        const { cedula, id_dependencia, nombre, tipo } = trabajador;\r\n        const updateT = fetch(`http://localhost:5000/respuestas/${cedula}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-type': 'application/json' },\r\n            body: JSON.stringify({ cedula, id_dependencia, nombre, tipo })\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err.message))\r\n        console.log(updateT)\r\n    }\r\n\r\n\r\n    return (\r\n        <MaterialTable\r\n            title=\"respuestas\"\r\n            columns={state.columns}\r\n            data={respuestas}\r\n            options={{\r\n                filtering: true\r\n              }}\r\n            editable={{\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve) => {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            if (oldData) {\r\n                                setState((prevState) => {\r\n                                    const data = [...prevState.data];\r\n                                    data[data.indexOf(oldData)] = newData;\r\n                                    updaterespuestas(newData);                //AQUI SE ACTUALIZA EL CAMPO\r\n                                    console.log(newData);\r\n                                    return { ...prevState, data };\r\n                                });\r\n                            }\r\n                        }, 600);\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        deleterespuestas(oldData.cedula_p);                    //AQUI SE DELETEA LA ESPECIALIDAD\r\n                        console.log(oldData.cedula_p);\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            setState((prevState) => {\r\n                                const data = [...prevState.data];\r\n                                data.splice(data.indexOf(oldData), 1);\r\n                                return { ...prevState, data };\r\n                            });\r\n                        }, 600);\r\n                    }),\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default RespuestasTable"]},"metadata":{},"sourceType":"module"}