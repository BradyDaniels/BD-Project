{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Dovah\\\\Desktop\\\\BD-Project\\\\client\\\\src\\\\components\\\\OrdenRespuesta\\\\OrdenRespuestaTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\n\nconst OrdenRepuestaTable = () => {\n  _s();\n\n  //estado del Componente\n  const [OrdenRepuesta, setOrdenRepuesta] = useState([{}]); //estado para los titulos de las columnas de la tabla\n  //NOTA: EL CAMPO FIELD DEBE SER EL MISMO NOMBRE QUE TIENE EL ATRIBUTO EN LA BD, SINO SE ROMPE\n  //TODAS LAS VARIABLES DE LAS TABLAS DEBEN TENER EL MISMO NOMBRE QUE EN LA BD\n\n  const [state, setState] = useState({\n    columns: [{\n      title: 'ID',\n      field: 'id',\n      editable: 'never'\n    }, {\n      title: 'Fecha Orden',\n      field: 'fecha_orden'\n    }, {\n      title: 'Monto Total',\n      field: 'monto_total'\n    }, {\n      title: 'Fecha de Entrega',\n      field: 'fecha_entrega'\n    }, {\n      title: 'Formato de Pago',\n      field: 'formato_pago'\n    }, {\n      title: 'Tipo Moneda',\n      field: 'tipo_moneda'\n    }, {\n      title: 'Cedula Direcctor',\n      field: 'cedula_director'\n    }, {\n      title: 'Observaciones',\n      field: 'observaciones'\n    }, {\n      title: 'Condiciones de Entrega',\n      field: 'condiciones_entrega'\n    }],\n    data: []\n  });\n  useEffect(() => {\n    fetchOrdenRepuesta();\n  }, []); //obtener todas las OrdenRepuesta\n\n  const fetchOrdenRepuesta = () => {\n    fetch('http://localhost:5000/orden_compra').then(res => res.json()).then(result => setOrdenRepuesta(result)).catch(err => console.log(err.message));\n  }; //eliminar una Detalle Requisicion\n\n\n  const deleteOrdenRepuesta = id => {\n    console.log(id);\n    fetch(`http://localhost:5000/orden_compra/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => console.log(result)).catch(err => console.log(err.message));\n  }; //actualizar una Detalle Requisicion\n\n\n  const updateOrdenRepuesta = OrdenRepuesta => {\n    console.log(OrdenRepuesta);\n    const {\n      id,\n      fecha_orden,\n      monto_total,\n      fecha_entrega,\n      formato_pago,\n      tipo_moneda,\n      cedula_director,\n      observaciones,\n      condiciones_entrega\n    } = OrdenRepuesta;\n    const updateOC = fetch(`http://localhost:5000/orden_compra/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        id,\n        fecha_orden,\n        monto_total,\n        fecha_entrega,\n        formato_pago,\n        tipo_moneda,\n        cedula_director,\n        observaciones,\n        condiciones_entrega\n      })\n    }).then(res => res.json()).then(result => console.log(result)).catch(err => console.log(err.message));\n    console.log(updateOC);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MaterialTable, {\n    title: \"Ordenes de Compra\",\n    columns: state.columns,\n    data: OrdenRepuesta,\n    options: {\n      filtering: true\n    },\n    editable: {\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              updateOrdenRepuesta(newData); //AQUI SE ACTUALIZA EL CAMPO\n\n              console.log(newData);\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        deleteOrdenRepuesta(oldData.id); //AQUI SE DELETEA LA ESPECIALIDAD\n\n        console.log(oldData.id);\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(OrdenRepuestaTable, \"eTLSA7xsHw67szS4HhVq1uWBBpE=\");\n\n_c = OrdenRepuestaTable;\nexport default OrdenRepuestaTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrdenRepuestaTable\");","map":{"version":3,"sources":["C:/Users/Dovah/Desktop/BD-Project/client/src/components/OrdenRespuesta/OrdenRespuestaTable.js"],"names":["React","useState","useEffect","MaterialTable","OrdenRepuestaTable","OrdenRepuesta","setOrdenRepuesta","state","setState","columns","title","field","editable","data","fetchOrdenRepuesta","fetch","then","res","json","result","catch","err","console","log","message","deleteOrdenRepuesta","id","method","headers","updateOrdenRepuesta","fecha_orden","monto_total","fecha_entrega","formato_pago","tipo_moneda","cedula_director","observaciones","condiciones_entrega","updateOC","body","JSON","stringify","filtering","onRowUpdate","newData","oldData","Promise","resolve","setTimeout","prevState","indexOf","onRowDelete","splice"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,gBAA1B;;AAGA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAE7B;AAEA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAlD,CAJ6B,CAM7B;AACA;AACA;;AACA,QAAM,CAAEM,KAAF,EAASC,QAAT,IAAsBP,QAAQ,CAAC;AACjCQ,IAAAA,OAAO,EAAE,CACL;AAACC,MAAAA,KAAK,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE,IAArB;AAA2BC,MAAAA,QAAQ,EAAE;AAArC,KADK,EAEL;AAACF,MAAAA,KAAK,EAAE,aAAR;AAAuBC,MAAAA,KAAK,EAAE;AAA9B,KAFK,EAGL;AAACD,MAAAA,KAAK,EAAE,aAAR;AAAuBC,MAAAA,KAAK,EAAE;AAA9B,KAHK,EAIL;AAACD,MAAAA,KAAK,EAAE,kBAAR;AAA4BC,MAAAA,KAAK,EAAE;AAAnC,KAJK,EAKL;AAACD,MAAAA,KAAK,EAAE,iBAAR;AAA2BC,MAAAA,KAAK,EAAE;AAAlC,KALK,EAML;AAACD,MAAAA,KAAK,EAAE,aAAR;AAAuBC,MAAAA,KAAK,EAAE;AAA9B,KANK,EAOL;AAACD,MAAAA,KAAK,EAAE,kBAAR;AAA4BC,MAAAA,KAAK,EAAE;AAAnC,KAPK,EAQL;AAACD,MAAAA,KAAK,EAAE,eAAR;AAAyBC,MAAAA,KAAK,EAAE;AAAhC,KARK,EASL;AAACD,MAAAA,KAAK,EAAE,wBAAR;AAAkCC,MAAAA,KAAK,EAAE;AAAzC,KATK,CADwB;AAYjCE,IAAAA,IAAI,EAAE;AAZ2B,GAAD,CAApC;AAeAX,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,kBAAkB;AACrB,GAFQ,EAEN,EAFM,CAAT,CAxB6B,CA4B7B;;AACA,QAAMA,kBAAkB,GAAG,MAAM;AAC7BC,IAAAA,KAAK,CAAC,oCAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,MAAM,IAAIb,gBAAgB,CAACa,MAAD,CAFpC,EAGKC,KAHL,CAGWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,CAHlB;AAIH,GALD,CA7B6B,CAoC7B;;;AACA,QAAMC,mBAAmB,GAAIC,EAAD,IAAQ;AAChCJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,EAAZ;AACAX,IAAAA,KAAK,CAAE,sCAAqCW,EAAG,EAA1C,EAA6C;AAC9CC,MAAAA,MAAM,EAAE,QADsC;AAE9CC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFqC,KAA7C,CAAL,CAIKZ,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAKUG,MAAM,IAAIG,OAAO,CAACC,GAAR,CAAYJ,MAAZ,CALpB,EAMKC,KANL,CAMWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,CANlB;AAOH,GATD,CArC6B,CAgD7B;;;AACA,QAAMK,mBAAmB,GAAIxB,aAAD,IAAmB;AAC3CiB,IAAAA,OAAO,CAACC,GAAR,CAAYlB,aAAZ;AACA,UAAM;AAAEqB,MAAAA,EAAF;AAAMI,MAAAA,WAAN;AAAmBC,MAAAA,WAAnB;AAAgCC,MAAAA,aAAhC;AAA+CC,MAAAA,YAA/C;AAA6DC,MAAAA,WAA7D;AAA0EC,MAAAA,eAA1E;AAA2FC,MAAAA,aAA3F;AAA0GC,MAAAA;AAA1G,QAAkIhC,aAAxI;AACA,UAAMiC,QAAQ,GAAGvB,KAAK,CAAE,sCAAqCW,EAAG,EAA1C,EAA6C;AAC/DC,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFsD;AAG/DW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEf,QAAAA,EAAF;AAAMI,QAAAA,WAAN;AAAmBC,QAAAA,WAAnB;AAAgCC,QAAAA,aAAhC;AAA+CC,QAAAA,YAA/C;AAA6DC,QAAAA,WAA7D;AAA0EC,QAAAA,eAA1E;AAA2FC,QAAAA,aAA3F;AAA0GC,QAAAA;AAA1G,OAAf;AAHyD,KAA7C,CAAL,CAKZrB,IALY,CAKPC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALA,EAMZF,IANY,CAMPG,MAAM,IAAIG,OAAO,CAACC,GAAR,CAAYJ,MAAZ,CANH,EAOZC,KAPY,CAONC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,CAPD,CAAjB;AAQAF,IAAAA,OAAO,CAACC,GAAR,CAAYe,QAAZ;AACH,GAZD;;AAcA,sBACI,QAAC,aAAD;AACI,IAAA,KAAK,EAAC,mBADV;AAEI,IAAA,OAAO,EAAE/B,KAAK,CAACE,OAFnB;AAGI,IAAA,IAAI,EAAEJ,aAHV;AAII,IAAA,OAAO,EAAE;AACLqC,MAAAA,SAAS,EAAE;AADN,KAJb;AAOI,IAAA,QAAQ,EAAE;AACNC,MAAAA,WAAW,EAAE,CAACC,OAAD,EAAUC,OAAV,KACT,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBC,QAAAA,UAAU,CAAC,MAAM;AACbD,UAAAA,OAAO;;AACP,cAAIF,OAAJ,EAAa;AACTrC,YAAAA,QAAQ,CAAEyC,SAAD,IAAe;AACpB,oBAAMpC,IAAI,GAAG,CAAC,GAAGoC,SAAS,CAACpC,IAAd,CAAb;AACAA,cAAAA,IAAI,CAACA,IAAI,CAACqC,OAAL,CAAaL,OAAb,CAAD,CAAJ,GAA8BD,OAA9B;AACAf,cAAAA,mBAAmB,CAACe,OAAD,CAAnB,CAHoB,CAGS;;AAC7BtB,cAAAA,OAAO,CAACC,GAAR,CAAYqB,OAAZ;AACA,qBAAO,EAAE,GAAGK,SAAL;AAAgBpC,gBAAAA;AAAhB,eAAP;AACH,aANO,CAAR;AAOH;AACJ,SAXS,EAWP,GAXO,CAAV;AAYH,OAbD,CAFE;AAgBNsC,MAAAA,WAAW,EAAGN,OAAD,IACT,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBtB,QAAAA,mBAAmB,CAACoB,OAAO,CAACnB,EAAT,CAAnB,CADqB,CACW;;AAChCJ,QAAAA,OAAO,CAACC,GAAR,CAAYsB,OAAO,CAACnB,EAApB;AACAsB,QAAAA,UAAU,CAAC,MAAM;AACbD,UAAAA,OAAO;AACPvC,UAAAA,QAAQ,CAAEyC,SAAD,IAAe;AACpB,kBAAMpC,IAAI,GAAG,CAAC,GAAGoC,SAAS,CAACpC,IAAd,CAAb;AACAA,YAAAA,IAAI,CAACuC,MAAL,CAAYvC,IAAI,CAACqC,OAAL,CAAaL,OAAb,CAAZ,EAAmC,CAAnC;AACA,mBAAO,EAAE,GAAGI,SAAL;AAAgBpC,cAAAA;AAAhB,aAAP;AACH,WAJO,CAAR;AAKH,SAPS,EAOP,GAPO,CAAV;AAQH,OAXD;AAjBE;AAPd;AAAA;AAAA;AAAA;AAAA,UADJ;AAwCH,CAvGD;;GAAMT,kB;;KAAAA,kB;AAyGN,eAAeA,kBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MaterialTable from 'material-table'\r\n\r\n\r\nconst OrdenRepuestaTable = () => {\r\n\r\n    //estado del Componente\r\n    \r\n    const [OrdenRepuesta, setOrdenRepuesta] = useState([{}]);\r\n\r\n    //estado para los titulos de las columnas de la tabla\r\n    //NOTA: EL CAMPO FIELD DEBE SER EL MISMO NOMBRE QUE TIENE EL ATRIBUTO EN LA BD, SINO SE ROMPE\r\n    //TODAS LAS VARIABLES DE LAS TABLAS DEBEN TENER EL MISMO NOMBRE QUE EN LA BD\r\n    const [ state, setState ] = useState({\r\n        columns: [\r\n            {title: 'ID', field: 'id', editable: 'never'},\r\n            {title: 'Fecha Orden', field: 'fecha_orden'},\r\n            {title: 'Monto Total', field: 'monto_total'},\r\n            {title: 'Fecha de Entrega', field: 'fecha_entrega'},\r\n            {title: 'Formato de Pago', field: 'formato_pago'},\r\n            {title: 'Tipo Moneda', field: 'tipo_moneda'},\r\n            {title: 'Cedula Direcctor', field: 'cedula_director'},\r\n            {title: 'Observaciones', field: 'observaciones'},\r\n            {title: 'Condiciones de Entrega', field: 'condiciones_entrega'},\r\n        ],\r\n        data: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchOrdenRepuesta()\r\n    }, [])\r\n\r\n    //obtener todas las OrdenRepuesta\r\n    const fetchOrdenRepuesta = () => {\r\n        fetch('http://localhost:5000/orden_compra')\r\n            .then(res => res.json())\r\n            .then(result => setOrdenRepuesta(result))\r\n            .catch(err => console.log(err.message))\r\n    }\r\n\r\n    //eliminar una Detalle Requisicion\r\n    const deleteOrdenRepuesta = (id) => {\r\n        console.log(id)\r\n        fetch(`http://localhost:5000/orden_compra/${id}`, {\r\n            method: 'DELETE',\r\n            headers: { 'Content-type': 'application/json' }\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err.message))\r\n    }\r\n\r\n    //actualizar una Detalle Requisicion\r\n    const updateOrdenRepuesta = (OrdenRepuesta) => {\r\n        console.log(OrdenRepuesta)\r\n        const { id, fecha_orden, monto_total, fecha_entrega, formato_pago, tipo_moneda, cedula_director, observaciones, condiciones_entrega } = OrdenRepuesta;\r\n        const updateOC = fetch(`http://localhost:5000/orden_compra/${id}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-type': 'application/json' },\r\n            body: JSON.stringify({ id, fecha_orden, monto_total, fecha_entrega, formato_pago, tipo_moneda, cedula_director, observaciones, condiciones_entrega })\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err.message))\r\n        console.log(updateOC)\r\n    }\r\n\r\n    return(\r\n        <MaterialTable\r\n            title=\"Ordenes de Compra\"\r\n            columns={state.columns}\r\n            data={OrdenRepuesta}\r\n            options={{\r\n                filtering: true\r\n              }}\r\n            editable={{\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve) => {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            if (oldData) {\r\n                                setState((prevState) => {\r\n                                    const data = [...prevState.data];\r\n                                    data[data.indexOf(oldData)] = newData;\r\n                                    updateOrdenRepuesta(newData);//AQUI SE ACTUALIZA EL CAMPO\r\n                                    console.log(newData);\r\n                                    return { ...prevState, data };\r\n                                });\r\n                            }\r\n                        }, 600);\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        deleteOrdenRepuesta(oldData.id);//AQUI SE DELETEA LA ESPECIALIDAD\r\n                        console.log(oldData.id);\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            setState((prevState) => {\r\n                                const data = [...prevState.data];\r\n                                data.splice(data.indexOf(oldData), 1);\r\n                                return { ...prevState, data };\r\n                            });\r\n                        }, 600);\r\n                    }),\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default OrdenRepuestaTable"]},"metadata":{},"sourceType":"module"}