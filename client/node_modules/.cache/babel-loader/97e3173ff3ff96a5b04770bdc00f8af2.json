{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Dovah\\\\Desktop\\\\BD-Project\\\\client\\\\src\\\\components\\\\LineaProveedor\\\\LineaProveedorTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table'; // id_linea, rif \n\nconst LineaProveedorTable = () => {\n  _s();\n\n  const [lineaProveedor, setLineaProveedor] = useState([{}]);\n  const [state, setState] = useState({\n    columns: [{\n      title: 'Linea',\n      field: 'id_linea',\n      editable: 'never'\n    }, {\n      title: 'RIF',\n      field: 'rif',\n      editable: 'never'\n    }],\n    data: []\n  }); //Cuando se renderiza el componente se llama la funcion que obtiene todas las especialidades\n\n  useEffect(() => {\n    fetchLineaProveedor();\n  }, []); //obtener todos los Trabajadores\n\n  const fetchLineaProveedor = () => {\n    fetch('http://localhost:5000/linea_proveedor').then(res => res.json()).then(result => setLineaProveedor(result)).catch(err => console.log(err.message));\n  }; //eliminar un Trabajador\n\n\n  const deleteLineaProveedor = (id_linea, rif) => {\n    console.log(id_linea, rif);\n    fetch(`http://localhost:5000/linea_proveedor/${id_linea}/${rif}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => console.log(result)).catch(err => console.log(err.message));\n  }; //actualizar un Trabajador\n\n\n  const updateLineaProveedor = lineaProveedor => {\n    console.log(lineaProveedor);\n    const {\n      id_linea,\n      rif\n    } = trabajador;\n    const updateLP = fetch(`http://localhost:5000/linea_proveedor/${id_linea}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        id_linea,\n        rif\n      })\n    }).then(res => res.json()).then(result => console.log(result)).catch(err => console.log(err.message));\n    console.log(updateLP);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MaterialTable, {\n    title: \"Linea Proveedor\",\n    columns: state.columns,\n    data: lineaProveedor,\n    editable: {\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              updateLineaProveedor(newData); //AQUI SE ACTUALIZA EL CAMPO\n\n              console.log(newData);\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        deleteLineaProveedor(oldData.id_linea, oldData.rif); //AQUI SE DELETEA LA ESPECIALIDAD\n\n        console.log(oldData.id_linea, oldData.rif);\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LineaProveedorTable, \"sHlNBP6lkxHv49gZV5gTSXJuoK0=\");\n\n_c = LineaProveedorTable;\nexport default LineaProveedorTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineaProveedorTable\");","map":{"version":3,"sources":["C:/Users/Dovah/Desktop/BD-Project/client/src/components/LineaProveedor/LineaProveedorTable.js"],"names":["React","useState","useEffect","MaterialTable","LineaProveedorTable","lineaProveedor","setLineaProveedor","state","setState","columns","title","field","editable","data","fetchLineaProveedor","fetch","then","res","json","result","catch","err","console","log","message","deleteLineaProveedor","id_linea","rif","method","headers","updateLineaProveedor","trabajador","updateLP","body","JSON","stringify","onRowUpdate","newData","oldData","Promise","resolve","setTimeout","prevState","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport MaterialTable from 'material-table'\r\n\r\n// id_linea, rif \r\nconst LineaProveedorTable = () => {\r\n    const [lineaProveedor, setLineaProveedor] = useState([{}])\r\n    const [state, setState] = useState({\r\n        columns: [\r\n            { title: 'Linea', field: 'id_linea', editable: 'never' },\r\n            { title: 'RIF', field: 'rif', editable: 'never' },\r\n        ],\r\n        data: []\r\n    })\r\n\r\n    //Cuando se renderiza el componente se llama la funcion que obtiene todas las especialidades\r\n    useEffect(() => {\r\n        fetchLineaProveedor()\r\n    }, [])\r\n\r\n    //obtener todos los Trabajadores\r\n    const fetchLineaProveedor = () => {\r\n        fetch('http://localhost:5000/linea_proveedor')\r\n            .then(res => res.json())\r\n            .then(result => setLineaProveedor(result))\r\n            .catch(err => console.log(err.message))\r\n    }\r\n\r\n    //eliminar un Trabajador\r\n    const deleteLineaProveedor = (id_linea, rif) => {\r\n        console.log(id_linea, rif)\r\n        fetch(`http://localhost:5000/linea_proveedor/${id_linea}/${rif}`, {\r\n            method: 'DELETE',\r\n            headers: { 'Content-type': 'application/json' }\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err.message))\r\n    }\r\n\r\n    //actualizar un Trabajador\r\n    const updateLineaProveedor = (lineaProveedor) => {\r\n        console.log(lineaProveedor)\r\n        const { id_linea, rif } = trabajador;\r\n        const updateLP = fetch(`http://localhost:5000/linea_proveedor/${id_linea}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-type': 'application/json' },\r\n            body: JSON.stringify({ id_linea, rif })\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err.message))\r\n        console.log(updateLP)\r\n    }\r\n\r\n\r\n    return (\r\n        <MaterialTable\r\n            title=\"Linea Proveedor\"\r\n            columns={state.columns}\r\n            data={lineaProveedor}\r\n            editable={{\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve) => {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            if (oldData) {\r\n                                setState((prevState) => {\r\n                                    const data = [...prevState.data];\r\n                                    data[data.indexOf(oldData)] = newData;\r\n                                    updateLineaProveedor(newData);                //AQUI SE ACTUALIZA EL CAMPO\r\n                                    console.log(newData);\r\n                                    return { ...prevState, data };\r\n                                });\r\n                            }\r\n                        }, 600);\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        deleteLineaProveedor(oldData.id_linea, oldData.rif);                    //AQUI SE DELETEA LA ESPECIALIDAD\r\n                        console.log(oldData.id_linea, oldData.rif);\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            setState((prevState) => {\r\n                                const data = [...prevState.data];\r\n                                data.splice(data.indexOf(oldData), 1);\r\n                                return { ...prevState, data };\r\n                            });\r\n                        }, 600);\r\n                    }),\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default LineaProveedorTable"]},"metadata":{},"sourceType":"module"}