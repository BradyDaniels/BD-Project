{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Dovah\\\\Desktop\\\\BD-Project\\\\client\\\\src\\\\components\\\\Proveedores\\\\ProveedoresTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\nimport LineaProveedores from '../LineaProveedor/LineaProveedor';\nimport Button from '@material-ui/core/Button';\n\nconst ProveedoresTable = () => {\n  _s();\n\n  //estado del Componente\n  const [proveedores, setProveedores] = useState([{}]); //estado para los titulos de las columnas de la tabla\n  //NOTA: EL CAMPO FIELD DEBE SER EL MISMO NOMBRE QUE TIENE EL ATRIBUTO EN LA BD, SINO SE ROMPE\n  //TODAS LAS VARIABLES DE LAS TABLAS DEBEN TENER EL MISMO NOMBRE QUE EN LA BD\n\n  const [state, setState] = useState({\n    columns: [{\n      title: 'id',\n      field: 'rif',\n      editable: 'never'\n    }, {\n      title: 'Razon Social',\n      field: 'razon_social'\n    }, {\n      title: 'Telefono',\n      field: 'telefono'\n    }, {\n      title: 'Correo',\n      field: 'correo'\n    }, {\n      title: 'Direccion',\n      field: 'direccion'\n    }],\n    data: []\n  });\n  useEffect(() => {\n    fetchProveedores();\n  }, []); //obtener todas las Dependencias\n\n  const fetchProveedores = () => {\n    fetch('http://localhost:5000/proveedores').then(res => res.json()).then(result => setProveedores(result)).catch(err => console.log(err.message));\n  }; //eliminar una Dependencia\n\n\n  const deleteProveedor = id => {\n    console.log(id);\n    fetch(`http://localhost:5000/proveedores/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => console.log(result)).catch(err => console.log(err.message));\n  }; //actualizar una Dependencia\n\n\n  const updateProveedor = proveedor => {\n    console.log(proveedor);\n    const {\n      rif,\n      razon_social,\n      telefono,\n      correo,\n      direccion\n    } = proveedor;\n    const updateD = fetch(`http://localhost:5000/proveedores/${rif}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        rif,\n        razon_social,\n        telefono,\n        correo,\n        direccion\n      })\n    }).then(res => res.json()).then(result => console.log(result)).catch(err => console.log(err.message));\n    console.log(updateD);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MaterialTable, {\n    title: \"Proveedores\",\n    columns: state.columns,\n    data: proveedores,\n    options: {\n      filtering: true\n    },\n    detailPanel: [{\n      tooltip: 'Show Name',\n      render: rowData => {\n        return /*#__PURE__*/_jsxDEV(LineaProveedores, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this);\n      }\n    }],\n    editable: {\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              updateProveedor(newData); //AQUI SE ACTUALIZA EL CAMPO\n\n              console.log(newData);\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        deleteProveedor(oldData.rif); //AQUI SE DELETEA LA ESPECIALIDAD\n\n        console.log(oldData.rif);\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProveedoresTable, \"3Umeous/FS+Z3WGb1PLYU2n0RSI=\");\n\n_c = ProveedoresTable;\nexport default ProveedoresTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProveedoresTable\");","map":{"version":3,"sources":["C:/Users/Dovah/Desktop/BD-Project/client/src/components/Proveedores/ProveedoresTable.js"],"names":["React","useState","useEffect","MaterialTable","LineaProveedores","Button","ProveedoresTable","proveedores","setProveedores","state","setState","columns","title","field","editable","data","fetchProveedores","fetch","then","res","json","result","catch","err","console","log","message","deleteProveedor","id","method","headers","updateProveedor","proveedor","rif","razon_social","telefono","correo","direccion","updateD","body","JSON","stringify","filtering","tooltip","render","rowData","onRowUpdate","newData","oldData","Promise","resolve","setTimeout","prevState","indexOf","onRowDelete","splice"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAIA,MAAMC,gBAAgB,GAAC,MAAI;AAAA;;AACxB;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,CAAC,EAAD,CAAD,CAA9C,CAHwB,CAKxB;AACA;AACA;;AACA,QAAM,CAAEQ,KAAF,EAASC,QAAT,IAAsBT,QAAQ,CAAC;AACjCU,IAAAA,OAAO,EAAE,CACL;AAACC,MAAAA,KAAK,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE,KAArB;AAA4BC,MAAAA,QAAQ,EAAE;AAAtC,KADK,EAEL;AAACF,MAAAA,KAAK,EAAE,cAAR;AAAwBC,MAAAA,KAAK,EAAE;AAA/B,KAFK,EAGL;AAACD,MAAAA,KAAK,EAAE,UAAR;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KAHK,EAIL;AAACD,MAAAA,KAAK,EAAE,QAAR;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAJK,EAKL;AAACD,MAAAA,KAAK,EAAE,WAAR;AAAqBC,MAAAA,KAAK,EAAE;AAA5B,KALK,CADwB;AAQjCE,IAAAA,IAAI,EAAE;AAR2B,GAAD,CAApC;AAWAb,EAAAA,SAAS,CAAC,MAAM;AACfc,IAAAA,gBAAgB;AAChB,GAFQ,EAEN,EAFM,CAAT,CAnBwB,CAuBxB;;AACA,QAAMA,gBAAgB,GAAG,MAAM;AAC1BC,IAAAA,KAAK,CAAC,mCAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,MAAM,IAAIb,cAAc,CAACa,MAAD,CAFlC,EAGKC,KAHL,CAGWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,CAHlB;AAIH,GALF,CAxBwB,CA+BvB;;;AACA,QAAMC,eAAe,GAAIC,EAAD,IAAQ;AAC5BJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,EAAZ;AACAX,IAAAA,KAAK,CAAE,qCAAoCW,EAAG,EAAzC,EAA4C;AAC7CC,MAAAA,MAAM,EAAE,QADqC;AAE7CC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFoC,KAA5C,CAAL,CAIKZ,IAJL,CAIUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJjB,EAKKF,IALL,CAKUG,MAAM,IAAIG,OAAO,CAACC,GAAR,CAAYJ,MAAZ,CALpB,EAMKC,KANL,CAMWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,CANlB;AAOH,GATD,CAhCuB,CA2CvB;;;AACA,QAAMK,eAAe,GAAIC,SAAD,IAAe;AACnCR,IAAAA,OAAO,CAACC,GAAR,CAAYO,SAAZ;AACA,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,YAAP;AAAqBC,MAAAA,QAArB;AAA8BC,MAAAA,MAA9B;AAAqCC,MAAAA;AAArC,QAAmDL,SAAzD;AACA,UAAMM,OAAO,GAAGrB,KAAK,CAAE,qCAAoCgB,GAAI,EAA1C,EAA6C;AAC9DJ,MAAAA,MAAM,EAAE,KADsD;AAE9DC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFqD;AAG9DS,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,QAAAA,GAAF;AAAOC,QAAAA,YAAP;AAAqBC,QAAAA,QAArB;AAA8BC,QAAAA,MAA9B;AAAqCC,QAAAA;AAArC,OAAf;AAHwD,KAA7C,CAAL,CAKXnB,IALW,CAKNC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALD,EAMXF,IANW,CAMNG,MAAM,IAAIG,OAAO,CAACC,GAAR,CAAYJ,MAAZ,CANJ,EAOXC,KAPW,CAOLC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB,CAPF,CAAhB;AAQAF,IAAAA,OAAO,CAACC,GAAR,CAAYa,OAAZ;AACH,GAZD;;AAcA,sBACI,QAAC,aAAD;AACI,IAAA,KAAK,EAAC,aADV;AAEI,IAAA,OAAO,EAAE7B,KAAK,CAACE,OAFnB;AAGI,IAAA,IAAI,EAAEJ,WAHV;AAII,IAAA,OAAO,EAAE;AACLmC,MAAAA,SAAS,EAAE;AADN,KAJb;AAOG,IAAA,WAAW,EAAE,CACT;AACCC,MAAAA,OAAO,EAAE,WADV;AAECC,MAAAA,MAAM,EAAEC,OAAO,IAAI;AACjB,4BACE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,gBADF;AAGD;AANF,KADS,CAPhB;AAiBI,IAAA,QAAQ,EAAE;AACNC,MAAAA,WAAW,EAAE,CAACC,OAAD,EAAUC,OAAV,KACT,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBC,QAAAA,UAAU,CAAC,MAAM;AACbD,UAAAA,OAAO;;AACP,cAAIF,OAAJ,EAAa;AACTtC,YAAAA,QAAQ,CAAE0C,SAAD,IAAe;AACpB,oBAAMrC,IAAI,GAAG,CAAC,GAAGqC,SAAS,CAACrC,IAAd,CAAb;AACAA,cAAAA,IAAI,CAACA,IAAI,CAACsC,OAAL,CAAaL,OAAb,CAAD,CAAJ,GAA8BD,OAA9B;AACAhB,cAAAA,eAAe,CAACgB,OAAD,CAAf,CAHoB,CAGK;;AACzBvB,cAAAA,OAAO,CAACC,GAAR,CAAYsB,OAAZ;AACA,qBAAO,EAAE,GAAGK,SAAL;AAAgBrC,gBAAAA;AAAhB,eAAP;AACH,aANO,CAAR;AAOH;AACJ,SAXS,EAWP,GAXO,CAAV;AAYH,OAbD,CAFE;AAgBNuC,MAAAA,WAAW,EAAGN,OAAD,IACT,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBvB,QAAAA,eAAe,CAACqB,OAAO,CAACf,GAAT,CAAf,CADqB,CACQ;;AAC7BT,QAAAA,OAAO,CAACC,GAAR,CAAYuB,OAAO,CAACf,GAApB;AACAkB,QAAAA,UAAU,CAAC,MAAM;AACbD,UAAAA,OAAO;AACPxC,UAAAA,QAAQ,CAAE0C,SAAD,IAAe;AACpB,kBAAMrC,IAAI,GAAG,CAAC,GAAGqC,SAAS,CAACrC,IAAd,CAAb;AACAA,YAAAA,IAAI,CAACwC,MAAL,CAAYxC,IAAI,CAACsC,OAAL,CAAaL,OAAb,CAAZ,EAAmC,CAAnC;AACA,mBAAO,EAAE,GAAGI,SAAL;AAAgBrC,cAAAA;AAAhB,aAAP;AACH,WAJO,CAAR;AAKH,SAPS,EAOP,GAPO,CAAV;AAQH,OAXD;AAjBE;AAjBd;AAAA;AAAA;AAAA;AAAA,UADJ;AAqDH,CA/GD;;GAAMT,gB;;KAAAA,gB;AAiHN,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport LineaProveedores from '../LineaProveedor/LineaProveedor';\r\nimport Button from '@material-ui/core/Button'\r\n\r\n\r\n\r\nconst ProveedoresTable=()=>{\r\n   //estado del Componente\r\n    \r\n   const [proveedores, setProveedores] = useState([{}]);\r\n\r\n   //estado para los titulos de las columnas de la tabla\r\n   //NOTA: EL CAMPO FIELD DEBE SER EL MISMO NOMBRE QUE TIENE EL ATRIBUTO EN LA BD, SINO SE ROMPE\r\n   //TODAS LAS VARIABLES DE LAS TABLAS DEBEN TENER EL MISMO NOMBRE QUE EN LA BD\r\n   const [ state, setState ] = useState({\r\n       columns: [\r\n           {title: 'id', field: 'rif', editable: 'never'},\r\n           {title: 'Razon Social', field: 'razon_social'},\r\n           {title: 'Telefono', field: 'telefono'},\r\n           {title: 'Correo', field: 'correo'},\r\n           {title: 'Direccion', field: 'direccion'},\r\n       ],\r\n       data: []\r\n   })\r\n\r\n   useEffect(() => {\r\n    fetchProveedores()\r\n   }, [])\r\n\r\n   //obtener todas las Dependencias\r\n   const fetchProveedores = () => {\r\n        fetch('http://localhost:5000/proveedores')\r\n            .then(res => res.json())\r\n            .then(result => setProveedores(result))\r\n            .catch(err => console.log(err.message))\r\n    }\r\n\r\n    //eliminar una Dependencia\r\n    const deleteProveedor = (id) => {\r\n        console.log(id)\r\n        fetch(`http://localhost:5000/proveedores/${id}`, {\r\n            method: 'DELETE',\r\n            headers: { 'Content-type': 'application/json' }\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err.message))\r\n    }\r\n\r\n    //actualizar una Dependencia\r\n    const updateProveedor = (proveedor) => {\r\n        console.log(proveedor)\r\n        const { rif, razon_social, telefono,correo,direccion } = proveedor;\r\n        const updateD = fetch(`http://localhost:5000/proveedores/${rif}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-type': 'application/json' },\r\n            body: JSON.stringify({ rif, razon_social, telefono,correo,direccion })\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err.message))\r\n        console.log(updateD)\r\n    }\r\n    \r\n    return(\r\n        <MaterialTable\r\n            title=\"Proveedores\"\r\n            columns={state.columns}\r\n            data={proveedores}\r\n            options={{\r\n                filtering: true\r\n              }}\r\n           detailPanel={[\r\n               {\r\n                tooltip: 'Show Name',\r\n                render: rowData => {\r\n                  return (\r\n                    <LineaProveedores/>\r\n                  )\r\n                }\r\n               }\r\n           ]}\r\n            editable={{\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve) => {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            if (oldData) {\r\n                                setState((prevState) => {\r\n                                    const data = [...prevState.data];\r\n                                    data[data.indexOf(oldData)] = newData;\r\n                                    updateProveedor(newData);//AQUI SE ACTUALIZA EL CAMPO\r\n                                    console.log(newData);\r\n                                    return { ...prevState, data };\r\n                                });\r\n                            }\r\n                        }, 600);\r\n                    }),\r\n                onRowDelete: (oldData) =>\r\n                    new Promise((resolve) => {\r\n                        deleteProveedor(oldData.rif);//AQUI SE DELETEA LA ESPECIALIDAD\r\n                        console.log(oldData.rif);\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                            setState((prevState) => {\r\n                                const data = [...prevState.data];\r\n                                data.splice(data.indexOf(oldData), 1);\r\n                                return { ...prevState, data };\r\n                            });\r\n                        }, 600);\r\n                    }),\r\n            }}\r\n        >\r\n            \r\n        </MaterialTable>\r\n    )\r\n\r\n}\r\n\r\nexport default ProveedoresTable;"]},"metadata":{},"sourceType":"module"}